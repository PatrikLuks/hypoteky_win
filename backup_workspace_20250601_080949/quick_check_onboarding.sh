#!/bin/zsh
# quick_check_onboarding.sh
# Rychl√Ω onboarding test pro nov√© v√Ωvoj√°≈ôe (macOS/zsh)
# Autor: GitHub Copilot, 2025-05-31

set -e

print_header() {
  echo "\n\033[1;36m$1\033[0m"
}

print_header "1Ô∏è‚É£  Kontrola aktivace virtu√°ln√≠ho prost≈ôed√≠ (.venv) a verze Pythonu:"
if [[ -z "$VIRTUAL_ENV" ]]; then
  echo "\033[1;31m[CHYBA]\033[0m Virtu√°ln√≠ prost≈ôed√≠ nen√≠ aktivn√≠! Spus≈•: source .venv/bin/activate"
  exit 1
else
  echo "Virtu√°ln√≠ prost≈ôed√≠ aktivn√≠: $VIRTUAL_ENV"
fi
python --version

print_header "2Ô∏è‚É£  Kontrola kl√≠ƒçov√Ωch bal√≠ƒçk≈Ø (django, pytest, playwright):"
for pkg in django pytest playwright; do
  python -c "import $pkg" 2>/dev/null && echo "$pkg OK" || { echo "\033[1;31m[CHYBA]\033[0m Bal√≠ƒçek $pkg nen√≠ nainstalov√°n!"; exit 1; }
done

print_header "3Ô∏è‚É£  Kontrola p≈ôipojen√≠ k datab√°zi a migrac√≠:"
python manage.py showmigrations || { echo "\033[1;31m[CHYBA]\033[0m Nelze zobrazit migrace! Zkontroluj DB a settings."; exit 1; }

print_header "4Ô∏è‚É£  Spu≈°tƒõn√≠ z√°kladn√≠ch test≈Ø (unit/integration):"
python manage.py test klienti.tests_api || { echo "\033[1;31m[CHYBA]\033[0m Testy nepro≈°ly! Zkontroluj v√Ωstup v√Ω≈°e."; exit 1; }

print_header "5Ô∏è‚É£  V≈°e OK! Prost≈ôed√≠ je p≈ôipraveno. üéâ"

print_header "6Ô∏è‚É£  Doporuƒçen√≠ pro dal≈°√≠ kroky:"
echo "- Spus≈• ./run_all_maintenance.sh pro kompletn√≠ √∫dr≈æbu workspace."
echo "- Proveƒè ./cleanup_bak_files.sh a ./cleanup_backups.sh pro √∫klid z√°loh a .bak soubor≈Ø."
echo "- Projdi ONBOARDING.md a ovƒõ≈ô checklisty."
echo "- Zkontroluj v√Ωstup CI/CD a snapshoty."
echo "- Pokud naraz√≠≈° na probl√©m, hledej v README.md nebo se ptej v chatu."

# Konec skriptu
