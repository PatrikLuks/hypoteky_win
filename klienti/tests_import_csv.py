import io
from django.test import TestCase
from klienti.models import Klient
from klienti.utils import import_klienti_from_csv

class ImportKlientuCSVTestCase(TestCase):
    def test_importuje_klienty_z_csv(self):
        # P≈ôiprav CSV v pamƒõti
        csv_data = (
            'jmeno,datum,vyber_banky,navrh_financovani_castka,duvod_zamitnuti\n'
            'Jan Import,2025-05-28,KB,2000000,\n'
            'Petr Import,2025-05-28,ƒåSOB,3000000,Nedostateƒçn√Ω p≈ô√≠jem\n'
            'Eva Import,2025-05-28,KB,2500000,\n'
        )
        file = io.StringIO(csv_data)
        pocet = import_klienti_from_csv(file)
        self.assertEqual(pocet, 3)
        klienti = list(Klient.objects.all())
        self.assertEqual(len(klienti), 3)
        # Hled√°n√≠ podle jm√©na v Pythonu kv≈Øli ≈°ifrov√°n√≠
        jan = next((k for k in klienti if k.jmeno == 'Jan Import'), None)
        self.assertIsNotNone(jan)
        self.assertEqual(jan.vyber_banky, 'KB')
        petr = next((k for k in klienti if k.jmeno == 'Petr Import'), None)
        self.assertIsNotNone(petr)
        self.assertEqual(petr.duvod_zamitnuti, 'Nedostateƒçn√Ω p≈ô√≠jem')
        eva = next((k for k in klienti if k.jmeno == 'Eva Import'), None)
        self.assertIsNotNone(eva)
        self.assertEqual(eva.vyber_banky, 'KB')

    def test_import_ignoruje_radky_bez_jmena(self):
        csv_data = (
            'jmeno,datum,vyber_banky,navrh_financovani_castka,duvod_zamitnuti\n'
            ',2025-05-28,KB,2000000,\n'
            'Jan Import,2025-05-28,KB,2000000,\n'
        )
        file = io.StringIO(csv_data)
        pocet = import_klienti_from_csv(file)
        self.assertEqual(pocet, 1)
        klienti = list(Klient.objects.all())
        self.assertEqual(len(klienti), 1)
        jan = next((k for k in klienti if k.jmeno == 'Jan Import'), None)
        self.assertIsNotNone(jan)
        self.assertEqual(jan.vyber_banky, 'KB')

    def test_sifrovane_pole_jmeno_vytvoreni_a_nalezeni(self):
        # Ovƒõ≈ô√≠me, ≈æe lze vytvo≈ôit a naj√≠t klienta podle jm√©na
        Klient.objects.create(jmeno='Testovac√≠ Klient', vyber_banky='Testovac√≠ Banka')
        klienti = list(Klient.objects.all())
        nalezen = any(k.jmeno == 'Testovac√≠ Klient' for k in klienti)
        self.assertTrue(nalezen)
        klient = next((k for k in klienti if k.jmeno == 'Testovac√≠ Klient'), None)
        self.assertIsNotNone(klient)
        self.assertEqual(klient.vyber_banky, 'Testovac√≠ Banka')

    def test_import_csv_edge_cases(self):
        """
        Testuje import klient≈Ø z CSV s edge-case ≈ô√°dky:
        - chybƒõj√≠c√≠ jm√©no
        - ≈°patn√Ω form√°t ƒç√°stky
        - duplicitn√≠ klient
        - pr√°zdn√Ω ≈ô√°dek
        """
        # P≈ôiprav CSV obsah s r≈Øzn√Ωmi chybami
        csv_content = (
            "jmeno,co_financuje,cena\n"
            "Jan Nov√°k,Byt,3000000\n"  # validn√≠
            ",D≈Øm,5000000\n"          # chyb√≠ jm√©no
            "Petr Dvo≈ô√°k,Byt,abc\n"    # ≈°patn√Ω form√°t ƒç√°stky
            "Jan Nov√°k,Byt,3000000\n"  # duplicitn√≠
            "\n"                       # pr√°zdn√Ω ≈ô√°dek
        )
        file = io.StringIO(csv_content)
        response = import_klienti_from_csv(file)
        self.assertEqual(response, 1)
        klienti = list(Klient.objects.all())
        self.assertEqual(len(klienti), 1)
        jan = next((k for k in klienti if k.jmeno == 'Jan Nov√°k'), None)
        self.assertIsNotNone(jan)
        self.assertEqual(jan.vyber_banky, 'KB')
        # Ovƒõ≈ô, ≈æe duplicitn√≠ klient nebyl importov√°n dvakr√°t
        self.assertEqual(Klient.objects.filter(jmeno="Jan Nov√°k").count(), 1)
        # Ovƒõ≈ô, ≈æe klient se ≈°patnou ƒç√°stkou nebyl importov√°n
        self.assertFalse(Klient.objects.filter(jmeno="Petr Dvo≈ô√°k").exists())
        # Ovƒõ≈ô, ≈æe klient bez jm√©na nebyl importov√°n
        self.assertEqual(Klient.objects.exclude(jmeno__isnull=False).count(), 0)

    def test_import_csv_extremni_znaky_a_hodnoty(self):
        """
        Testuje import klient≈Ø z CSV s extr√©mn√≠mi znaky a hodnotami:
        - velmi dlouh√© jm√©no (255 znak≈Ø)
        - speci√°ln√≠ znaky a diakritika
        - emoji v jm√©nƒõ
        - HTML tagy v poli co_financuje
        - extr√©mn√≠ hodnoty ƒç√°stky (velmi vysok√°, z√°porn√°, nula)
        - pokus o SQL injection v poli co_financuje
        Tyto sc√©n√°≈ôe ovƒõ≈ôuj√≠ robustnost a bezpeƒçnost importu.
        """
        dlouhe_jmeno = 'A' * 255
        csv_content = (
            "jmeno,co_financuje,cena\n"
            f"{dlouhe_jmeno},Byt,1234567\n"  # velmi dlouh√© jm√©no
            "≈Ωofie ƒåern√°,Chalupa,2000000\n"  # diakritika
            "Emil üòä,D≈Øm,1500000\n"         # emoji
            "Jan Novak,<b>Byt</b>,1000000\n" # HTML tag
            "Petr Velk√Ω,Byt,9999999999\n"    # extr√©mnƒõ vysok√° ƒç√°stka
            "Karel Mal√Ω,Byt,-500000\n"       # z√°porn√° ƒç√°stka
            "Marek Nula,Byt,0\n"            # nula
            "Eva SQL,'; DROP TABLE klienti;--,1200000\n" # SQL injection
        )
        file = io.StringIO(csv_content)
        response = import_klienti_from_csv(file)
        # Ovƒõ≈ô, ≈æe validn√≠ klienti byli importov√°ni
        klienti = list(Klient.objects.all())
        jmena = [k.jmeno for k in klienti]
        self.assertIn(dlouhe_jmeno, jmena, "Klient s dlouh√Ωm jm√©nem nebyl importov√°n.")
        self.assertIn("≈Ωofie ƒåern√°", jmena, "Klient s diakritikou nebyl importov√°n.")
        self.assertIn("Emil üòä", jmena, "Klient s emoji nebyl importov√°n.")
        self.assertIn("Jan Novak", jmena, "Klient s HTML tagem nebyl importov√°n.")
        self.assertIn("Petr Velk√Ω", jmena, "Klient s extr√©mn√≠ ƒç√°stkou nebyl importov√°n.")
        self.assertIn("Marek Nula", jmena, "Klient s nulovou nebo z√°pornou ƒç√°stkou nebyl importov√°n.")
        self.assertIn("Eva SQL", jmena, "Klient s pokusem o SQL injection nebyl importov√°n.")
        # Ovƒõ≈ô, ≈æe pole co_financuje je spr√°vnƒõ ulo≈æeno (HTML tagy, SQL injection)
        jan = next((k for k in klienti if k.jmeno == "Jan Novak"), None)
        self.assertIsNotNone(jan)
        self.assertIn("<b>Byt</b>", jan.co_financuje)
        eva = next((k for k in klienti if k.jmeno == "Eva SQL"), None)
        self.assertIsNotNone(eva)
        self.assertIn("DROP TABLE", eva.co_financuje)
        # Ovƒõ≈ô, ≈æe extr√©mn√≠ ƒç√°stka je spr√°vnƒõ ulo≈æena
        petr = next((k for k in klienti if k.jmeno == "Petr Velk√Ω"), None)
        self.assertIsNotNone(petr)
        self.assertEqual(petr.cena, 9999999999)
        # Ovƒõ≈ô, ≈æe z√°porn√° a nulov√° ƒç√°stka je ulo≈æena (podle business logiky m≈Ø≈æe b√Ωt validn√≠ nebo ne)
        marek = next((k for k in klienti if k.jmeno == "Marek Nula"), None)
        self.assertIsNotNone(marek)
        self.assertEqual(marek.cena, 0)
        karel = next((k for k in klienti if k.jmeno == "Karel Mal√Ω"), None)
        self.assertIsNotNone(karel)
        self.assertEqual(karel.cena, -500000)
        # Ovƒõ≈ô, ≈æe klienti s extr√©mn√≠mi znaky nezp≈Øsobili chybu v importu
        self.assertGreaterEqual(len(klienti), 8, "Nƒõkter√Ω z klient≈Ø nebyl importov√°n.")

    def test_import_csv_rollback_pri_chybe(self):
        """
        Ovƒõ≈ô√≠, ≈æe p≈ôi chybƒõ bƒõhem importu CSV nedojde k ƒç√°steƒçn√©mu importu ani nekonzistenci dat.
        Nap≈ô√≠klad: pokud jeden ≈ô√°dek zp≈Øsob√≠ v√Ωjimku, ≈æ√°dn√Ω klient se nevytvo≈ô√≠.
        """
        from django.db import transaction
        csv_data = (
            'jmeno,datum,vyber_banky,navrh_financovani_castka,duvod_zamitnuti\n'
            'Jan Import,2025-05-28,KB,2000000,\n'
            'CHYBA,CHYBA,CHYBA,CHYBA,CHYBA\n'  # tento ≈ô√°dek zp≈Øsob√≠ chybu
            'Eva Import,2025-05-28,KB,2500000,\n'
        )
        file = io.StringIO(csv_data)
        try:
            with transaction.atomic():
                import_klienti_from_csv(file)
                raise Exception("Simulovan√° chyba po importu")
        except Exception:
            pass
        # Ovƒõ≈ô, ≈æe se nevytvo≈ôil ≈æ√°dn√Ω klient (rollback)
        self.assertEqual(Klient.objects.count(), 0)
